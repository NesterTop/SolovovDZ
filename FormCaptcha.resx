<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABx2AAAcdgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAFUAAACQAAAAhQAAAIQAAACEAAAAhAAAAIYAAACJAAAAhgAA
        AIQAAACEAAAAhAAAAIQAAACEAAAAhAAAAIUAAACBAAAATQAAAAUAAAAAAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAKAAAA5AAAAP8AAAD9AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAAD/AAAAwgAAABsAAAAAAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAACsAAAA/wAAALsAAAB0AAAAhQAA
        AHcAAAC8AAAA/wAAALwAAAB3AAAAggAAAIAAAACAAAAAfwAAAHwAAAB7AAAAhAAAANgAAAD/AAAAwgAA
        AAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAFEAAAD/AAAAvwAA
        AAAAAAAFAAAAAAAAAHsAAAD/AAAAewAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAFQAA
        ANoAAAD/AAAARwAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAADAAA
        AN8AAAD/AAAApQAAAIAAAAB6AAAAuwAAAP8AAAC7AAAAdgAAAIIAAAB+AAAAhgAAAFEAAAAAAAAABQAA
        AAkAAAAAAAAAhQAAAP8AAAB1AAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAAAAAAAVgAAAP4AAAD/AAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAAD/AAAA4wAA
        AAoAAAABAAAABgAAAAAAAACZAAAA/wAAAGsAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAAAAAAAIAAAAMAAAAD/AAAA0wAAAHcAAACBAAAAfQAAAHsAAAB7AAAAegAA
        AIMAAABRAAAAAAAAAAIAAAAAAAAAUQAAAPgAAAD+AAAALQAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAcAAAA5wAAAP8AAABIAAAAAAAAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAHAAAAVAAAAMIAAAD9AAAA/wAAAIoAAAAAAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAJ4AAAD/AAAAowAAAAAAAAAGAAAABAAA
        AAQAAAAFAAAAAwAAAAAAAAAaAAAAdgAAANwAAAD/AAAA/wAAAOkAAABxAAAAAAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAlAAAA+QAAAPcAAAAnAAAAAAAA
        AAIAAAAAAAAAAQAAAAAAAAAUAAAAlgAAAPIAAAD/AAAA/wAAANMAAABlAAAADgAAAAAAAAADAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAHIAAAD/AAAAogAA
        AAAAAAADAAAAAAAAAAEAAAAIAAAAAAAAAHgAAAD/AAAA7wAAAKAAAAAzAAAAAAAAAAEAAAABAAAABAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAsgAA
        AP8AAABUAAAAAAAAAAMAAAABAAAAAAAAAAQAAAAAAAAAfQAAAP8AAAC6AAAAegAAAIcAAABkAAAAFgAA
        AAAAAAAEAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAA
        AAMAAADbAAAA/wAAACcAAAAAAAAAAgAAAAAAAAAUAAAATAAAAIoAAADfAAAA/wAAAP4AAAD/AAAA/gAA
        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
        F//+gBf//oAX//6JF//+gBf//oAX//5AJ/8=
</value>
  </data>
</root>